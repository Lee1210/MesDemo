// <autogenerated>
//   This file was generated by T4 code generator Dto.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Linq.Expressions;

using Mes.Core.Data;
using Mes.Demo.Dtos.SiteManagement;
using Mes.Demo.Models.SiteManagement;
using Mes.Utility.Data;


namespace Mes.Demo.Services.SiteManagement
{
    public partial class SiteManagementService
    {        
        public IRepository<Problem, int> ProblemRepository {protected get; set; }

        /// <summary>
        /// 获取异常 信息查询数据集
        /// </summary>
        public IQueryable<Problem> Problems { get { return ProblemRepository.Entities; } }
        
        /// <summary>
        /// 检查异常信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的异常信息编号</param>
        /// <returns>异常信息是否存在</returns>
        public bool CheckProblemExists(Expression<Func<Problem, bool>> predicate, int id = 0)
        {
            return ProblemRepository.CheckExists(predicate, id);
        }
        /// <summary>
        /// 添加异常信息
        /// </summary>
        /// <param name="dtos">要添加的异常信息DTO信息</param>
        /// <returns>业务操作结果</returns>
        public OperationResult AddProblems(params ProblemDto[] dtos)
        {
            return ProblemRepository.Insert(dtos);
        }
        
        /// <summary>
        /// 更新异常信息
        /// </summary>
        /// <param name="dtos">包含更新信息的异常DTO信息</param>
        /// <returns>业务操作结果</returns>
        public OperationResult EditProblems(params ProblemDto[] dtos)
        {
            return ProblemRepository.Update(dtos);
        }

        /// <summary>
        /// 删除异常信息
        /// </summary>
        /// <param name="ids">要删除的异常信息编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult DeleteProblems(params int[] ids)
        {
            return ProblemRepository.Delete(ids);
        }
        public OperationResult DeleteProblems_false(params int[] ids)
        {
            UnitOfWork.TransactionEnabled = true;
            int i = 0;
            foreach (var id in ids)
            {
                Problem problem = Problems.FirstOrDefault(p => p.Id == id);
                if (problem != null)
                {
                    problem.IsDeleted = true;
                    i++;
                }

            }
            i = UnitOfWork.SaveChanges();
            OperationResult result = new OperationResult(OperationResultType.Success);
            if (i > 0)
            {
                result.Message = string.Format("删除了{0}条数据", i);
            }
            else
            {
                result.ResultType = OperationResultType.Error;
                result.Message = string.Format("删除失败");
            }
            return result;
        }
    }
}
      
